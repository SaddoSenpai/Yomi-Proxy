<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Yomi Proxy</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body class="public">

    <!-- NEW: Announcement Banner -->
    <% if (announcementMessage) { %>
        <div class="announcement-banner" id="announcement-banner" data-message="<%= announcementMessage %>">
            <p><%= announcementMessage %></p>
            <span class="announcement-close" id="announcement-close">&times;</span>
        </div>
    <% } %>

    <main class="container">
        <h1>Yomi Proxy</h1>
        <p>This is a public proxy for various AI models. Use the endpoints below with your preferred client.</p>
        
        <div class="info-grid">
            <div class="security-info">
                <strong>Security Mode:</strong> 
                <% if (securityMode === 'none') { %>
                    <span class="status-none">None (Open to Public)</span>
                <% } else if (securityMode === 'password') { %>
                    <span class="status-password">Password Protected</span>
                <% } else if (securityMode === 'token') { %>
                    <span class="status-token">User Token Required</span>
                <% } else { %>
                    <span class="status-unknown">Unknown</span>
                <% } %>
            </div>

            <div class="security-info">
                <strong>Logging Status:</strong> 
                <% if (loggingMode === 'enabled') { %>
                    <span class="status-logging-enabled">Enabled</span>
                <% } else if (loggingMode === 'auto_purge') { %>
                    <span class="status-logging-purge">Auto Purge (in <%= loggingPurgeHours %>h)</span>
                <% } else if (loggingMode === 'disabled') { %>
                    <span class="status-logging-disabled">Disabled</span>
                <% } %>
            </div>
        </div>

        <% if (providers.length > 0) { %>
            <% providers.forEach(provider => { %>
                <div class="provider-card">
                    <div class="provider-header">
                        <% if (provider.isCustom) { %>
                            <h2><%= provider.displayName %></h2>
                        <% } else { %>
                            <h2><%= provider.name.charAt(0).toUpperCase() + provider.name.slice(1) %></h2>
                        <% } %>
                    </div>
                    
                    <div class="endpoint-wrapper">
                        <code><%= baseUrl %>/<%= provider.name %>/v1/chat/completions</code>
                    </div>

                    <button class="copy-btn" data-endpoint="<%= baseUrl %>/<%= provider.name %>/v1/chat/completions">Copy API Endpoint</button>

                    <div class="provider-details">
                        <% if (provider.isCustom) { %>
                            <div><strong>Model:</strong> <span><%= provider.modelDisplayName || provider.modelId %></span></div>
                            <% if (provider.enforcedModelName) { %>
                                <div><strong>Required Model:</strong> <span><%= provider.enforcedModelName %></span></div>
                            <% } %>
                        <% } %>
                        <div><strong>Max Context:</strong> <span><%= provider.maxContext %></span></div>
                        <div><strong>Max Output:</strong> <span><%= provider.maxOutput %></span></div>
                    </div>
                    <div class="provider-keys">
                        <span class="key-status active">Active: <%= provider.keys.active %></span>
                        <span class="key-status over-quota">Over Quota: <%= provider.keys.over_quota %></span>
                        <span class="key-status revoked">Revoked: <%= provider.keys.revoked %></span>
                    </div>
                </div>
            <% }) %>
        <% } else { %>
            <p>No providers are currently configured. The administrator needs to add API keys.</p>
        <% } %>

        <section class="user-guide">
            <h2>How to Use This Proxy</h2>
            <h3>1. API Endpoint & Model Name</h3>
            <p>
                Use the full API Endpoint provided above in your client's API URL field. For the "Model Name" field in your client, you have two options:
            </p>
            <ul>
                <li><strong>For Built-in Providers (OpenAI, Gemini, etc.):</strong> You can use any model name supported by that provider (e.g., <code>gpt-4o</code>, <code>gemini-pro</code>).</li>
                <li><strong>For Custom Providers:</strong> If a "Required Model" is listed, you <strong>must</strong> use that exact name in your client's model field. Otherwise, you can typically use any name you like, as the proxy will replace it with the correct model ID automatically.</li>
            </ul>
            <h3>2. Custom Prompts</h3>
            <p>
                This proxy allows you to inject a custom, one-time prompt into the structure. This is useful for things like character-specific instructions or memory.
            </p>
            <p>
                To use it, place a special tag in your <strong>first user message</strong> (usually along with character persona and scenario information):
            </p>
            <pre><code>&lt;Custom_Prompt&gt;
This is my special instruction for the AI.
It can be multiple lines.
&lt;/Custom_Prompt&gt;</code></pre>
            <p>
                The proxy will extract this text. If the administrator has configured a <code>&lt;&lt;CUSTOM_PROMPT&gt;&gt;</code> placeholder in the prompt structure for this provider, your text will be injected there. If not, this tag will be ignored.
            </p>
            <h3>3. Commands</h3>
            <p>
                Commands are special tags you can include anywhere in your messages to inject pre-defined blocks of text, such as jailbreaks or persona modifiers.
            </p>
            <p>
                For example, to use a jailbreak command, you might include the tag <code>&lt;JAILBREAK_V4&gt;</code> in your message. The proxy will detect this, remove the tag, and inject the corresponding content at the location defined by the administrator.
            </p>
            <p>
                <a href="/commands" class="btn-link">View the full list of available commands here</a>
            </p>
        </section>
    </main>

    <script src="/main.js"></script>
</body>
        </html>